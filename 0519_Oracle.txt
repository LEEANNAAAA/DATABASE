--1
desc emp

--2
select * from emp;

--3 JONES 의 정보만(대소문자 일치 시켜줘야 한다. 이미 기록된 정보이므로)
select *
from emp
where ename='JONES';

--4 deptno 가 30번인것만
select *
from emp
where deptno=30;

--5 부서번호가 30번 아닌것만 (!=, <>, ^= 부정으로 동일한 의미)
SELECT *
FROM EMP
WHERE DEPTNO != 30; -- 또는 NOT DEPTNO=30;과도 같다 / NOT IN(30);

--6 부서번호가 30이면서 직업이 세일즈맨인 사람
SELECT *
FROM EMP
WHERE DEPTNO=30 AND JOB='SALESMAN';

--7 30번이거나 CLERK > UPPER(JOB)=UPPER('clerk')
SELECT *
FROM EMP
WHERE DEPTNO=30 OR JOB='CLERK';

--8 봉급이 3000받는 사람
SELECT *
FROM EMP
WHERE SAL=3000;

--9 연봉이 36000인 사람
SELECT *
FROM EMP
WHERE SAL*12=36000;

--10 봉급이 3000이상인 사람
SELECT *
FROM EMP
WHERE SAL>=3000;

--11 이름이 FORD
SELECT *
FROM EMP
WHERE ENAME = 'FORD';

--12 이름이 F 이상
SELECT *
FROM EMP
WHERE ENAME >='F';

--13 이름이 F로 시작하는 사람
SELECT *
FROM EMP
WHERE ENAME LIKE 'F%';

--14 FORD 이전인 사람
SELECT *
FROM EMP
WHERE ENAME <='F';

--15 JOB 'MANAGER', 'SALESMAN','CLERK' <OR사용>(각각 JOB을 다 써줘야 한다)
SELECT *
FROM EMP
WHERE JOB = 'MANAGER' OR 
      JOB='SALESMAN' OR 
      JOB='CLERK';

--16 IN사용 (''꼭 넣어줘야 한다)
SELECT *
FROM EMP
WHERE JOB IN('MANAGER', 'SALESMAN', 'CLERK');

--17 JOB 'MANAGER', 'SALESMAN','CLERK' 이 아닌 사람 <OR 사용> (부정)
SELECT *
FROM EMP
WHERE NOT (JOB = 'MANAGER' OR 
      JOB='SALESMAN' OR 
      JOB='CLERK');

--18 아닌 사람 IN 사용(NOT IN 도는 NOT JOB IN으로 적어도 된다)
SELECT *
FROM EMP
WHERE JOB NOT IN('MANAGER', 'SALESMAN', 'CLERK'); 

--19 봉급이 2000에서 3000사이
SELECT *
FROM EMP
WHERE SAL >=2000 AND SAL<=3000;

--20 BETWEEN A AND B (부정은 NOT BETWEEN 또는 NOT SAL BETWEENT 도 가능)
SELECT *
FROM EMP
WHERE SAL BETWEEN 2000 AND 3000;

--21 이름이 S로 시작하는 사람
SELECT *
FROM EMP
WHERE ENAME LIKE 'S%';

--22 이름에 AM 이 든 사람
SELECT *
FROM EMP
WHERE ENAME LIKE'%AM%';

--23 연봉 : 봉급 12달 + 보너스(NVL(COMM,0) : NULL일 때는 0으로 계산해라(NULL VALUE)
SELECT ENAME, SAL, COMM, SAL*12+NVL(COMM,0)
FROM EMP;

--24 COMM이 없는 사람
SELECT *
FROM EMP
WHERE COMM IS NULL;

--25 보너스 받은 사람 (0출력)
SELECT *
FROM EMP
WHERE COMM IS NOT NULL;

--26 급여가 NULL보다 크고 COMM이 NULL인 사람( > 값 안나옴 NULL 자체가 값을 모름)
SELECT *
FROM EMP
WHERE SAL > NULL AND COMM IS NULL;

--27 급여가 NULL보다 크거나 COMM이 NULL인 사람(값은 나옴, COMM IS NULL이 있으니까)
SELECT *
FROM EMP
WHERE SAL > NULL OR COMM IS NULL;

--28 부서번호가 10번, 20번
SELECT *
FROM EMP
WHERE DEPTNO IN(10,20); --WHERE DEPTNO=10 OR DEPTNO=20;

--UNION 사용
SELECT *
FROM EMP
WHERE DEPTNO=10
UNION
SELECT *
FROM EMP
WHERE DEPTNO=20;

--29 
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 10
UNION
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO=20;

--30 (데이터 타입이 같아야 한다. 
--뒤에 두개는 데이터 타입이 다르지만, 앞에 두개는 타입이 다르므로 오류)
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 10
UNION
SELECT ENAME, EMPNO, DEPTNO, SAL
FROM EMP
WHERE DEPTNO = 20;

--31 타입이 같으면 이름이 달라도 출력 가능
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO=10
UNION
SELECT SAL, JOB, DEPTNO, SAL
FROM EMP
WHERE DEPTNO=20;

--32 10번부서 사원들의 사원번호, 이름, 봉급, 부서번호
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 10
UNION
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 10;

--33 두번씩 나오게 > UNION ALL  중복O
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 10
UNION ALL
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 10;

--34 전체부서에서 10번 부서만 빼기 (집합연산자의 경우 ORDER BY를 하고 싶으면 *가 아니라 출력 범위를 정해야 한다)
SELECT *
FROM EMP
MINUS
SELECT *
FROM EMP
WHERE DEPTNO=10;


SELECT *
FROM EMP
ORDER BY DEPTNO;

--35 전체 부서 중 10번 부서와 공통인 사람
SELECT *
FROM EMP
INTERSECT
SELECT *
FROM EMP
WHERE DEPTNO=10;

--36 이름에 두번째 글자가 L인 사람
SELECT ENAME
FROM EMP
WHERE ENAME LIKE '_L%';

--Q1 사원이름이 s로 끝나는 사원
SELECT *
FROM EMP
WHERE ENAME LIKE '%S';

--Q2 30번 부서에서 직책이 salesman인 사원의 사원번호, 이름, 직책, 급여, 부서번호 출력
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO=30 AND JOB='SALESMAN';

--Q3 20, 30번 부서에 근무하는 사원 중 급여가 2000초과인 사원, 사원 번호, 이름, 급여, 부서번호 출력
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO IN(20,30) AND SAL>2000;

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
INTERSECT
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO IN(20,30) AND SAL>2000;

--Q4 급여 가 2000이상 3000이하 범위 이외의 값을 가진 데이터만 출력
SELECT *
FROM EMP
WHERE NOT (SAL>=2000 AND SAL<=3000);

--Q5 사원이름에 E가 포함되어 있는 30번 부서 사원 중 급여가 1000-2000 사이가 아닌 
--사원 이름, 사원 번호, 급여, 부서번호를 출력
SELECT ENAME, EMPNO, SAL, DEPTNO
FROM EMP
WHERE ENAME LIKE '%E%' AND DEPTNO=30 AND SAL NOT BETWEEN 1000 AND 2000;

--Q5
SELECT ENAME, EMPNO, SAL, DEPTNO
FROM EMP
WHERE ENAME LIKE '%E%' AND 
NOT (SAL>=1000 AND SAL<=2000) AND
DEPTNO=30;

--Q6 추가수당이 존재하지 않고 직책이 MANAGER,CLERK인 사원 중 사원이름의 두번째 글자가 
--L이 아닌 사원의 정보를 출력
SELECT *
FROM EMP
WHERE COMM IS NULL AND JOB IN('MANAGER','CLERK') AND ENAME NOT LIKE '_L%'; 





--#6장

--1
SELECT SYSDATE
FROM EMP;

SELECT * 
FROM EMP;

SELECT SYSDATE
FROM DUAL;

SELECT * FROM DUAL;

--2 사원명과 이름을 대문자로 소문자로, 첫자만 대문자로
SELECT ENAME, UPPER(ENAME), LOWER(ENAME), INITCAP(ENAME)
FROM EMP;

--3 이름이 SCOTT인 사람
SELECT *
FROM EMP
WHERE UPPER(ENAME) = UPPER('scott');

--4 scott이 들어있는 사람
SELECT *
FROM EMP
WHERE UPPER(ENAME) LIKE UPPER('%scott%');

--5 이름과 이름의 길이를 출력
SELECT ENAME, LENGTH(ENAME)
FROM EMP;

--6 이름의 길이가 5자 이상만
SELECT ENAME, LENGTH(ENAME)
FROM EMP
WHERE LENGTH(ENAME)>=5;

--7 본인 이름 글자 수와 바이트 수 (DUAL은 테이블 이름으로 값 한개만 뽑아내고 싶을 때)
SELECT LENGTH('안나'), LENGTHB('안나')
FROM DUAL;

--8 직급 첫자부터 두글자, 셋째 글자부터 2글자, 5번째 글자부터 끝까지
SELECT JOB, SUBSTR(JOB,1,2),SUBSTR(JOB,3,2),SUBSTR(JOB,5)
FROM EMP;

--9 음수로 시작 위치 값 사용
SELECT JOB, SUBSTR(JOB, -LENGTH(JOB)), 
SUBSTR(JOB, -LENGTH(JOB),2), SUBSTR(JOB,-3)
FROM EMP;

--10 특정 문자 위치 찾기
SELECT INSTR('HELLO, OFACLE!','L') AS INSTR_1,
INSTR('HELLO, OFACLE!','L',5) AS INSTR_2,
INSTR('HELLO, OFACLE!','L',2,2) AS INSTR_3
FROM EMP;

--11 INSTR 함수로 사원 이름에 문자 S가 있는 행 구하기
SELECT *
FROM EMP
WHERE INSTR(ENAME,'S')>0;

--12 LIKE 연산자로 사원 이름에 문자 S가 있는 행 구하기
SELECT *
FROM EMP
WHERE ENAME LIKE '%S%';

--13 REPLACE 함수로 문자열 안에 있는 특정 문자 바꾸기
SELECT '010-1234-5678' AS REPLACE_BEFORE,
REPLACE('010-1234-5678', '-', ' ')AS REPLACE_1,
REPLACE('010-1234-5678', '-')AS REPLACE_2
FROM DUAL;

--14 LAPD, RPAD 함수 사용하여 출력하기
SELECT 'Oracle',
LPAD('Oracle', 10, '#')AS LPAD_1,
RPAD('Oracle', 10, '*')AS RPAD_1,
LPAD('Oracle', 10)AS LPAD_2,
RPAD('Oracle', 10)AS RPAD_2
FROM DUAL;

--15 RPAD 함수를 사용하여 개인정보 뒷자리 *표시로 출력하기
SELECT
RPAD('971225-', 14, '*') AS RPAD_JMNO,
RPAD('010-1234-', 13, '*') AS RPAD_PHONE
FROM DUAL;

--16 두 열 사이에 콜론(:)넣고 연결하기
SELECT CONCAT(EMPNO, ENAME),
CONCAT(EMPNO, CONCAT(':',ENAME))
FROM EMP
WHERE ENAME = 'SCOTT';

--17 TRIM 함수로 공백 제거하여 출력하기
SELECT '[' || TRIM('_ _Oracle_ _')|| ']' AS TRIM,
'[' || TRIM(LEADING FROM '_ _Oracle_ _')|| ']' AS TRIM_LEADING,
'[' || TRIM(TRAILING FROM'_ _Oracle_ _')|| ']' AS TRIM_TRAILING,
'[' || TRIM(BOTH FROM'_ _Oracle_ _')|| ']' AS TRIM_BOTH
FROM DUAL;

--18 TRIM 함수로 삭제할 문자_ 삭제 후 출력하기
SELECT '[' || TRIM('_' FROM '_ _Oracle_ _')|| ']' AS TRIM,
'[' || TRIM(LEADING '_' FROM '_ _Oracle_ _')|| ']' AS TRIM_LEADING,
'[' || TRIM(TRAILING '_' FROM '_ _Oracle_ _')|| ']' AS TRIM_TRAILING,
'[' || TRIM(BOTH '_' FROM '_ _Oracle_ _')|| ']' AS TRIM_BOTH
FROM DUAL;

--19 TRIM,LTRIM,RTRIM 사용하여 문자열 출력하기
SELECT '[' || TRIM(' _Oracle_ ') || ']' AS TRIM,
'[' || LTRIM(' _Oracle_ ') || ']' AS LTRIM,
'[' || LTRIM('<_Oracle_>','_<') || ']' AS LTRIM_2,
'[' || RTRIM(' _Oracle_ ') || ']' AS RTRIM,
'[' || RTRIM('<_Oracle_>','>_') || ']' AS RTRIM_2
FROM DUAL;

--20 ROUND 함수를 사용하여 반올림된 숫자 출력하기
SELECT ROUND(1234.5678) AS ROUND,
       ROUND(1234.5678, 0) AS ROUND_0,
       ROUND(1234.5678, 1) AS ROUND_1,
       ROUND(1234.5678, 2) AS ROUND_2,
       ROUND(1234.5678, -1) AS ROUND_MINUS1,
       ROUND(1234.5678, -2) AS ROUND_MINUS2
  FROM DUAL;
  
--21 TRUNC 함수를 사용하여 숫자 출력하기
SELECT TRUNC(1234.5678) AS TRUNC,
       TRUNC(1234.5678, 0) AS TRUNC_0,
       TRUNC(1234.5678, 1) AS TRUNC_1,
       TRUNC(1234.5678, 2) AS TRUNC_2,
       TRUNC(1234.5678, -1) AS TRUNC_MINUS1,
       TRUNC(1234.5678, -2) AS TRUNC_MINUS2
  FROM DUAL;
  
--22 CEIL, FLOOR 함수로 숫자 출력하기
SELECT CEIL(3.14),
       FLOOR(3.14),
       CEIL(-3.14),
       FLOOR(-3.14)
  FROM DUAL;
  
--23 MOD함수를 사용하여 나머지 값 출력하기
SELECT MOD(15,6),
MOD(10,2),
MOD(11,2)
FROM DUAL;